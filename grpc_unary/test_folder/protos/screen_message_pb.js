// source: protos/screen_message.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.bsp.kbh.Screen', null, global);
goog.exportSymbol('proto.bsp.kbh.Screen.Panel', null, global);
goog.exportSymbol('proto.bsp.kbh.Screen.Resolution', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bsp.kbh.Screen = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bsp.kbh.Screen, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bsp.kbh.Screen.displayName = 'proto.bsp.kbh.Screen';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bsp.kbh.Screen.Resolution = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bsp.kbh.Screen.Resolution, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bsp.kbh.Screen.Resolution.displayName = 'proto.bsp.kbh.Screen.Resolution';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bsp.kbh.Screen.prototype.toObject = function(opt_includeInstance) {
  return proto.bsp.kbh.Screen.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bsp.kbh.Screen} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bsp.kbh.Screen.toObject = function(includeInstance, msg) {
  var f, obj = {
    sitzeInc: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    resolution: (f = msg.getResolution()) && proto.bsp.kbh.Screen.Resolution.toObject(includeInstance, f),
    panel: jspb.Message.getFieldWithDefault(msg, 3, 0),
    multitouch: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bsp.kbh.Screen}
 */
proto.bsp.kbh.Screen.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bsp.kbh.Screen;
  return proto.bsp.kbh.Screen.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bsp.kbh.Screen} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bsp.kbh.Screen}
 */
proto.bsp.kbh.Screen.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSitzeInc(value);
      break;
    case 2:
      var value = new proto.bsp.kbh.Screen.Resolution;
      reader.readMessage(value,proto.bsp.kbh.Screen.Resolution.deserializeBinaryFromReader);
      msg.setResolution(value);
      break;
    case 3:
      var value = /** @type {!proto.bsp.kbh.Screen.Panel} */ (reader.readEnum());
      msg.setPanel(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMultitouch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bsp.kbh.Screen.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bsp.kbh.Screen.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bsp.kbh.Screen} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bsp.kbh.Screen.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSitzeInc();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getResolution();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bsp.kbh.Screen.Resolution.serializeBinaryToWriter
    );
  }
  f = message.getPanel();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getMultitouch();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.bsp.kbh.Screen.Panel = {
  UNKNOWN: 0,
  IPS: 1,
  OLED: 2
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bsp.kbh.Screen.Resolution.prototype.toObject = function(opt_includeInstance) {
  return proto.bsp.kbh.Screen.Resolution.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bsp.kbh.Screen.Resolution} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bsp.kbh.Screen.Resolution.toObject = function(includeInstance, msg) {
  var f, obj = {
    width: jspb.Message.getFieldWithDefault(msg, 1, 0),
    hight: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bsp.kbh.Screen.Resolution}
 */
proto.bsp.kbh.Screen.Resolution.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bsp.kbh.Screen.Resolution;
  return proto.bsp.kbh.Screen.Resolution.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bsp.kbh.Screen.Resolution} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bsp.kbh.Screen.Resolution}
 */
proto.bsp.kbh.Screen.Resolution.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWidth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bsp.kbh.Screen.Resolution.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bsp.kbh.Screen.Resolution.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bsp.kbh.Screen.Resolution} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bsp.kbh.Screen.Resolution.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWidth();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getHight();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 width = 1;
 * @return {number}
 */
proto.bsp.kbh.Screen.Resolution.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.bsp.kbh.Screen.Resolution} returns this
 */
proto.bsp.kbh.Screen.Resolution.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 hight = 2;
 * @return {number}
 */
proto.bsp.kbh.Screen.Resolution.prototype.getHight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.bsp.kbh.Screen.Resolution} returns this
 */
proto.bsp.kbh.Screen.Resolution.prototype.setHight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional float sitze_inc = 1;
 * @return {number}
 */
proto.bsp.kbh.Screen.prototype.getSitzeInc = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.bsp.kbh.Screen} returns this
 */
proto.bsp.kbh.Screen.prototype.setSitzeInc = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional Resolution resolution = 2;
 * @return {?proto.bsp.kbh.Screen.Resolution}
 */
proto.bsp.kbh.Screen.prototype.getResolution = function() {
  return /** @type{?proto.bsp.kbh.Screen.Resolution} */ (
    jspb.Message.getWrapperField(this, proto.bsp.kbh.Screen.Resolution, 2));
};


/**
 * @param {?proto.bsp.kbh.Screen.Resolution|undefined} value
 * @return {!proto.bsp.kbh.Screen} returns this
*/
proto.bsp.kbh.Screen.prototype.setResolution = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bsp.kbh.Screen} returns this
 */
proto.bsp.kbh.Screen.prototype.clearResolution = function() {
  return this.setResolution(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bsp.kbh.Screen.prototype.hasResolution = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Panel panel = 3;
 * @return {!proto.bsp.kbh.Screen.Panel}
 */
proto.bsp.kbh.Screen.prototype.getPanel = function() {
  return /** @type {!proto.bsp.kbh.Screen.Panel} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.bsp.kbh.Screen.Panel} value
 * @return {!proto.bsp.kbh.Screen} returns this
 */
proto.bsp.kbh.Screen.prototype.setPanel = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bool multitouch = 4;
 * @return {boolean}
 */
proto.bsp.kbh.Screen.prototype.getMultitouch = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.bsp.kbh.Screen} returns this
 */
proto.bsp.kbh.Screen.prototype.setMultitouch = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


goog.object.extend(exports, proto.bsp.kbh);
